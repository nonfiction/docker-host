#!/bin/bash

# Load up .env
[ -e .env ] && export $(cat .env)

# Bash helper functions
if [ -e /root/platform/swarm/lib/helpers.sh ]; then source /root/platform/swarm/lib/helpers.sh;
else source <(curl -fsSL https://github.com/nonfiction/platform/raw/master/swarm/lib/helpers.sh); fi

# Digital Ocean API functions
if [ -e /root/platform/swarm/lib/doctl.sh ]; then source /root/platform/swarm/lib/doctl.sh;
else source <(curl -fsSL https://github.com/nonfiction/platform/raw/master/swarm/lib/doctl.sh); fi

# Symlink swarm command if locally installed
[ -e /root/platform/swarm/swarm ] && ln -sf /root/platform/swarm/swarm /usr/local/bin/swarm >/dev/null 2>&1


# Print droplet price chart
if [ "$1" = "\$" ]; then
  echo_droplet_prices
  exit 0
fi



# First parameter is name of swarm and primary node
SWARM="$1"
if undefined $SWARM; then
  echo_stop "Missing swarm name!"
  echo "The first argument for this script should be the swarm's name. Example: swarm app"
  exit 1
fi

# Primary usually matches swarm name (but it doesn't have to)
PRIMARY=$(get_swarm_primary $SWARM)
# Second paramter is changes to replicas (additions, removals, promotion)
CHANGES=${@:2}


# Swap a replica and primary node
PROMOTION=$(get_swarm_promotion $SWARM $CHANGES)
if defined $PROMOTION; then
  DEMOTION=$PRIMARY

  # Temporarily reassign PRIMARY for display
  PRIMARY=$PROMOTION

  # Add old primary to replicas, remove new primary from replicas
  REPLICAS=$(get_swarm_replicas $SWARM $DEMOTION $PROMOTION)


# Add or remove replicas
else
  REMOVALS=$(get_swarm_removals $SWARM $CHANGES)
  ADDITIONS=$(get_swarm_additions $SWARM $CHANGES)

  # Look up number of existing replicas in swarm, including additions, without removals
  REPLICAS=$(get_swarm_replicas $SWARM "$ADDITIONS" "$REMOVALS")

  # If primary doesn't exist yet, count that as an addition
  has_droplet $PRIMARY || ADDITIONS="$(echo "$PRIMARY $ADDITIONS" | args)"
fi

# Combined with $PRIMARY is all nodes
NODES="$(echo "${PRIMARY} ${REPLICAS}" | args)"


# Display the main header
echo_line blue
echo " $(echo_color black/on_blue "[${SWARM}]") $(echo_color blue "SWARM MANAGER")"
echo_line blue

# Count the number of nodes in this swarm
count=$((1 + $(echo $REPLICAS | wc -w)))
[ "$count" = "1" ] && count="Single"
echo_next "${count}-node swarm..."
echo_line green
echo_env PRIMARY
echo_env REPLICAS
# echo_env NODES

# Display the changes to the swarm
if defined $PROMOTION || defined $REMOVALS || defined $ADDITIONS; then
  echo_next "Swarm Changes..."
  echo_line green
  if defined $PROMOTION; then
    echo_env PROMOTION
    echo_env DEMOTION
  elif defined $REMOVALS || defined $ADDITIONS; then
    echo_env REMOVALS
    echo_env ADDITIONS
  fi
fi

# Display the env variables
echo_next "Swarm Config..."
echo_line green
echo_env DOMAIN
echo_env DROPLET_IMAGE
echo_env DROPLET_SIZE
echo_env VOLUME_SIZE
echo_env FS_TYPE
echo_env REGION
echo_env ROOT_PASSWORD
echo_env ROOT_PRIVATE_KEY 20
echo_env ROOT_PUBLIC_KEY 20
echo_env WEBHOOK

if ask "Continue?"; then  
  echo
else
  echo_stop "Cancelled."  
  exit 1;
fi



# Promotion/demotion
defined $DEMOTION && echo_main "New Primary: ${DEMOTION} => ${PROMOTION}"
if defined $DEMOTION; then

  if droplets_ready "$NODES"; then
    echo_next "...ready!"
  else
    echo_stop "Not ready for reassignment!"
  fi

  echo "do reassignment"
  exit

fi


# Deletions
defined $REMOVALS && echo_main "Node removals: ${REMOVALS}"
for node in $REMOVALS; do
  if ask "Really DELETE droplet [${node}]?"; then

    echo_next "Removing ${node} from docker swarm..."

    # On primary, demote docker swarm manager to worker
    echo_run $PRIMARY "LEAVE=1 NAME=${node} /root/platform/swarm/node/docker"

    # On replica, leave docker swarm
    echo_run $node    "LEAVE=1              /root/platform/swarm/node/docker"

    echo_next "Removing ${node} from gluster volume..."

    # On primary, remove brick and peer from gluster volume
    echo_run $PRIMARY "LEAVE=1 NAME=${node} /root/platform/swarm/node/gluster"

    # Delete DNS records 
    remove_record "${node}"
    remove_record "*.${node}"

    # Delete droplet
    remove_droplet "${node}"

    # Delete volume
    remove_volume "${node}"

  fi
done



# First node processed has a primary role
role="primary"

reset_changes
for node_name in $NODES; do
  
  echo_node_header  $node_name $role
  echo_droplet_info $node_name
  echo_volume_info  $node_name
  echo_record_info  $node_name

  if has_changes; then 
    if ask "Process droplet?"; then
      
      # First create/resize the volume that will be attached
      create_or_resize_volume $node_name $SWARM $role
      
      # Then create/resize the droplet itself
      create_or_resize_droplet $node_name $SWARM $role
      
      # Last, ensure the DNS records are pointing to this droplet
      public_ip="$(get_droplet_public_ip $node_name)"
      create_or_update_record "${node_name}" $public_ip
      create_or_update_record "*.${node_name}" $public_ip
      
    fi
  fi  
  reset_changes
  
  role="replica"
done


if ask "Run docker & gluster configuration on each node?"; then  
  echo
else
  echo_stop "Cancelled."  
  exit 1;
fi

# # Get actual replicas that now exist
# REPLICAS=$(get_swarm_replicas $SWARM)
#
# # Combined with $PRIMARY is all nodes
# NODES="$(echo "${PRIMARY} ${REPLICAS}" | args)"


# ---------------------------------------------------------
# Verify all nodes are ready
# ---------------------------------------------------------
if droplets_ready "$NODES"; then
  echo_next "...ready!"
else
  echo_stop "Not ready for configuration! Newly created droplets require 5-10 minutes."
fi

# echo_next "Checking nodes..."
#
# nodes_ready="yes"
# for node in $NODES; do
#   echo -n "$node "
#   if droplet_ready $node; then 
#     echo_color green "✓" 
#   else
#     echo_color red "✕" 
#     nodes_ready=no
#   fi
# done
#
# if [ "${nodes_ready}" = "no" ]; then
#   echo_stop "Not ready for configuration! Newly created droplets require 5-10 minutes."
#   exit
# else
#   echo_next "...ready!"
# fi


# ---------------------------------------------------------
# System configuration for each node
# ---------------------------------------------------------
echo_main "1. Node Config..."

# Build hosts file
hosts="127.0.0.1 localhost"
for node in $NODES; do
  ip="$(get_droplet_private_ip $node)"
  hosts="${hosts}\n${ip} ${node}"
done

# Loop all nodes in swarm
for node in $NODES; do

    # Pull updates from git
    run $node "/root/platform/swarm/node/update"

    # Prepare environment variables for run command
    env=""
    env="${env} NAME=\"$node\""
    env="${env} DOMAIN=\"$DOMAIN\""
    env="${env} FS_TYPE=\"$FS_TYPE\""
    env="${env} HOSTS_FILE=\"$hosts\""
    env="${env} ROOT_PASSWORD=\"$ROOT_PASSWORD\""
    env="${env} ROOT_PUBLIC_KEY=\"$ROOT_PUBLIC_KEY\""

    # Run script on node
    run $node "${env} /root/platform/swarm/node/config"

done  
  

# ---------------------------------------------------------
# Create Docker Swarm and join workers
# ---------------------------------------------------------
echo_main "2. Docker Config..."

# Loop all nodes in swarm
for node in $NODES; do

  # Set join token to "primary" if not replica
  if [ "$node" = "$PRIMARY" ]; then
    join_token="primary"

  # Else, get join token from primary node
  else
    join_token="$(run $PRIMARY "cat /etc/docker-join-token")"
  fi
  
  # Prepare environment variables for run command
  env="JOIN=1"
  env="${env} NAME=\"$node\""
  env="${env} PRIVATE_IP=\"$(get_droplet_private_ip $node)\""
  env="${env} JOIN_TOKEN=\"$join_token\""

  # Run script on node
  run $node "${env} /root/platform/swarm/node/docker"

done


# ---------------------------------------------------------
# Create Gluster Volume
# ---------------------------------------------------------
echo_main "3. Gluster Config..."

# Loop all nodes in swarm
for node in $NODES; do

  # Prepare environment variables for run command
  env="JOIN=1"
  env="${env} NAME=\"$node\""
  env="${env} NODES=\"$NODES\""
  env="${env} PRIMARY=\"$PRIMARY\""

  # Run script on node
  run $node "${env} /root/platform/swarm/node/gluster"

done


# ---------------------------------------------------------
# Deploy Swarm
# ---------------------------------------------------------
echo_main "4. Deploy Swarm..."
run $PRIMARY "cd /root/platform && ls -lah"


# ---------------------------------------------------------
# Finish
# ---------------------------------------------------------
echo
echo_line green
echo_color black/on_green " COMPLETE! "
echo_line green

exit
