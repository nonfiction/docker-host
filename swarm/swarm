#!/bin/bash

# Load up .env
[ -e .env ] && export $(cat .env)

# Bash helper functions
if [ -e /root/platform/swarm/lib/helpers.sh ]; then source /root/platform/swarm/lib/helpers.sh;
else source <(curl -fsSL https://github.com/nonfiction/platform/raw/master/swarm/lib/helpers.sh); fi

# Digital Ocean API functions
if [ -e /root/platform/swarm/lib/doctl.sh ]; then source /root/platform/swarm/lib/doctl.sh;
else source <(curl -fsSL https://github.com/nonfiction/platform/raw/master/swarm/lib/doctl.sh); fi

# Symlink swarm command if locally installed
[ -e /root/platform/swarm/swarm ] && ln -sf /root/platform/swarm/swarm /usr/local/bin/swarm >/dev/null 2>&1


# First parameter is name of swarm and primary node
PRIMARY="$1"
if undefined $PRIMARY; then
  echo_stop "Missing swarm name!"
  echo "The first argument for this script should be the swarm's name. Example: swarm app 3"
  exit 1
fi

# Second parameter is number of additions, or default 0
ADDITIONS="$(get_droplet_additions $1 $2)"

# Look up number of existing replicas from $PRIMARY name, single node swarm is 0
REPLICAS="$(echo "$(get_droplet_replicas $1) $ADDITIONS" | tr ' ' '\n' | sort | uniq | xargs)"

# If primary doesn't exist yet, count that as an addition
has_droplet $PRIMARY || ADDITIONS="$(echo "$PRIMARY $ADDITIONS" | xargs)"

# Count the number of nodes in this swarm
count=$((1 + $(echo $REPLICAS | wc -w)))
[ "$count" = "1" ] && count="Single"


echo_next "${count}-node swarm..."
echo_line green
echo_env PRIMARY
echo_env REPLICAS
echo_env ADDITIONS

echo_next "Swarm Config..."
echo_line green
echo_env DROPLET_IMAGE
echo_env DROPLET_SIZE
echo_env VOLUME_SIZE
echo_env FS_TYPE
echo_env REGION
echo_env ROOT_PASSWORD
echo_env ROOT_PRIVATE_KEY 20
echo_env ROOT_PUBLIC_KEY 20
echo_env WEBHOOK

if ask "Continue?"; then  
  echo_next "Beginning..."
else
  echo_stop "Cancelled."  
  exit 1;
fi

# Swarm name matches the name of the primary node
swarm_name=$PRIMARY

# First node processed has a primary role
role="primary"

# Make sure this file doesn't yet exist
rm -f /tmp/process-droplet.txt

for node_name in $(echo "$PRIMARY $REPLICAS" | xargs); do
  
  echo_node_header  $node_name $role
  echo_droplet_info $node_name
  echo_volume_info  $node_name
  echo_record_info  $node_name

  if has /tmp/process-droplet.txt; then 
    if ask "Process droplet?"; then
      
      # First create/resize the volume that will be attached
      create_or_resize_volume $node_name $swarm_name $role
      
      # Then create/resize the droplet itself
      create_or_resize_droplet $node_name $swarm_name $role
      
      # Last, ensure the DNS records are pointing to this droplet
      public_ip="$(get_droplet_public_ip $node_name)"
      create_or_update_record "${node_name}" $public_ip
      create_or_update_record "*.${node_name}" $public_ip
      
    fi
  fi  
  
  # Clear out this file
  rm -f /tmp/process-droplet.txt
  
  role="replica"
done


# All available nodes in this swarm
nodes="$PRIMARY $(get_droplet_replicas $swarm_name | tr ' ' '\n' | sort | uniq | xargs)"

if ask "Run swarm & gluster configuration on each node? Newly created droplets require 5-10 minutes before they're ready for this."; then  
  echo_next "Continuing..."
else
  echo_stop "Cancelled."  
  exit 1;
fi

# ---------------------------------------------------------
# System configuration for each node
# ---------------------------------------------------------
echo
echo_next "Node Config..."
echo_line green

# Build hosts file
hosts="127.0.0.1 localhost"
for name in $nodes; do
  ip="$(get_droplet_private_ip $name)"
  hosts="${hosts}\n${ip} ${name}"
done

# Track any droplets that are still spinning up
echo "" > /tmp/droplets-not-ready.txt

# Loop all nodes in swarm
for name in $nodes; do

  # Ensure this droplet is ready (if it was recently created)
  if undefined "$(run $name "ls /root" | grep platform)"; then
    echo "[${name}]" >> /tmp/droplets-not-ready.txt
    echo_info "Droplet $name is not yet ready..."

  else

    # if ask "Run node configuation on $name?"; then

      # Pull updates from git
      run $name "/root/platform/swarm/node/update"

      # Prepare environment variables for run command
      env=""
      env="${env} NAME=\"$name\""
      env="${env} DOMAIN=\"$DOMAIN\""
      env="${env} FS_TYPE=\"$FS_TYPE\""
      env="${env} HOSTS_FILE=\"$hosts\""
      env="${env} ROOT_PASSWORD=\"$ROOT_PASSWORD\""
      env="${env} ROOT_PUBLIC_KEY=\"$ROOT_PUBLIC_KEY\""

      # Run script on node
      run $name "${env} /root/platform/swarm/node/config"

    # fi
  fi

done  
  

# ---------------------------------------------------------
# Create Docker Swarm and join workers
# ---------------------------------------------------------
echo
echo_next "Swarm Config..."
echo_line green

# Loop all nodes in swarm
for name in $nodes; do

  # Ensure this droplet is ready (if it was recently created)
  if [[ "$(cat /tmp/droplets-not-ready.txt)" =~ "[${name}]" ]]; then
    echo_info "Droplet $name is not yet ready..."
  else

    # if ask "Run swarm configuration on $name?"; then

      # Set join token to "primary" if not replica
      if [ "$name" = "$PRIMARY" ]; then
        join_token="primary"

      # Else, get join token from primary node
      else
        join_token="$(run $PRIMARY "cat /etc/docker-join-token")"
      fi
      
      # Prepare environment variables for run command
      env=""
      env="${env} PRIVATE_IP=\"$(get_droplet_private_ip $name)\""
      env="${env} JOIN_TOKEN=\"$join_token\""

      # Run script on node
      run $name "${env} /root/platform/swarm/node/docker"
  
    # fi
  fi

done


# ---------------------------------------------------------
# Create Gluster Volume
# ---------------------------------------------------------
echo
echo_next "Gluster Config..."
echo_line green

# Loop all nodes in swarm
for name in $nodes; do

  # Ensure this droplet is ready (if it was recently created)
  if [[ "$(cat /tmp/droplets-not-ready.txt)" =~ "[${name}]" ]]; then
    echo_info "Droplet $name is not yet ready..."
  else

    # if ask "Run gluster configuration on $name?"; then

      # Prepare environment variables for run command
      env=""
      env="${env} NAME=\"$name\""
      env="${env} NODES=\"$nodes\""
      env="${env} PRIMARY=\"$PRIMARY\""

      # Run script on node
      run $name "${env} /root/platform/swarm/node/gluster"
  
    # fi
  fi

done


# ---------------------------------------------------------
# Deploy Swarm
# ---------------------------------------------------------
echo
echo_next "Deploy Swarm..."
echo_line green
run $PRIMARY "cd /root/platform && ls -lah"


# ---------------------------------------------------------
# Finish
# ---------------------------------------------------------
echo
# Messaging about droplets not all being ready
not_ready="$(cat /tmp/droplets-not-ready.txt | xargs)"
if defined "$not_ready"; then 
  echo_line red
  echo_stop "Re-run when all droplet's are ready: $not_ready"
  echo_line red
else
  echo_line green
  echo_next "...COMPLETE!"
  echo_line green
fi

exit
