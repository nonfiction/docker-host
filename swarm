#!/bin/bash

# ---------------------------------------------------------
# Ensure doctl is installed and authenticated
# ---------------------------------------------------------

# Install doctl (if it isn't already)
if hasnt doctl; then
  
  echo "=> Installing doctl..."
  
  # https://github.com/digitalocean/doctl/releases
  VERSION="1.59.0"
  curl -sL https://github.com/digitalocean/doctl/releases/download/v$VERSION/doctl-$VERSION-linux-amd64.tar.gz | tar -xzv
  mv ./doctl /usr/local/bin/doctl

fi

# Check if doctl is already authorized to list droplets
if error "doctl compute droplet list"; then
  
  echo "=> doctl unauthorized"
  
  #  https://cloud.digitalocean.com/account/api/tokens
  DO_AUTH_TOKEN=$(env_or_file DO_AUTH_TOKEN /run/secrets/do_token)
  if undefined "$DO_AUTH_TOKEN"; then
    echo "=> Missing DO_AUTH_TOKEN!"
    echo "Create a Personal Access Token on Digital Ocean and set it to an environment variable named:"
    echo "export DO_TOKEN=\"...\""
    exit 1
  fi     

  echo "=> Authorizing doctl..."
  doctl auth init -t $DO_AUTH_TOKEN 
  
fi  

# DOMAIN from env or secret
DOMAIN=$(env_or_file DOMAIN /run/secrets/domain)
if undefined $DOMAIN; then
  echo "=> Missing DOMAIN!"
  echo "Create a domain name named by Digital Ocean and set it to an environment variable named:"
  echo "export DOMAIN=\"example.com\""
  exit 1
fi

# SSH_KEY from env or secret
SSH_KEY="$(env_or_file SSH_KEY ./ssh_key /run/secrets/ssh_key)"
if undefined $SSH_KEY; then
  echo "=> Missing SSH_KEY!"
  echo "Generate an SSH key and set it to an environment variable named:"
  echo "export SSH_KEY=\"-----BEGIN RSA PRIVATE KEY----- ... \""
  echo "OR save a file in your current directory named: ssh_key"
  exit 1
fi

# SSH_PUB from SSH_KEY
echo "$SSH_KEY" > /tmp/ssh_key
chmod 400 /tmp/ssh_key
SSH_PUB="$(ssh-keygen -y -f /tmp/ssh_key)"
rm /tmp/ssh_key

# ROOT_PASSWORD from env or secret
ROOT_PASSWORD=$(env_or_file ROOT_PASSWORD /run/secrets/root_password)
if undefined $ROOT_PASSWORD; then
  echo "=> Missing ROOT_PASSWORD!"
  echo "Create a root password and set it to an environment variable named:"
  echo "export ROOT_PASSWORD=\"secret\""
  exit 1
fi

# DROPLET_IMAGE from env, or default
# - ubuntu-18-04-x64
# - ubuntu-20-04-x64
if undefined $DROPLET_IMAGE; then
  DROPLET_IMAGE="ubuntu-18-04-x64"
fi

# DROPLET_SIZE from env, or default
# $5/mo: s-1vcpu-1gb
# $15/mo: s-2vcpu-2gb 
if undefined $DROPLET_SIZE; then
  DROPLET_SIZE="s-1vcpu-1gb"
fi

# VOLUME_SIZE from env, or default
if undefined $VOLUME_SIZE; then
  VOLUME_SIZE="50"
fi

# REGION from env, or default
if undefined $REGION; then
  REGION="tor1"
fi

# FS_TYPE from env, or default
if undefined $FS_TYPE; then
  FS_TYPE="ext4"
fi

# First parameter is name of swarm
name="$1"
if undefined $1; then
  echo "=> Missing swarm name!"
  echo "The first argument for this script should be the swarm's name. Example: ./swarm.sh app 3"
  exit 1
fi

# Second parameter is number of new replicas, or default 0
new_replicas="$2"
undefined $2 && new_replicas=0

# echo "name: ${name}.${DOMAIN}"
# echo "nodes: ${nodes}"
# echo "root_password: ${ROOT_PASSWORD}"
# echo "droplet_image: ${DROPLET_IMAGE}"
# echo "droplet_size: ${DROPLET_SIZE}"
# echo "volume_size: ${VOLUME_SIZE}"
# echo
# echo "--------"
# echo


#if has_droplet $name; then

echo "== Configuration..."
echo "DROPLET_IMAGE=${DROPLET_IMAGE}"
echo "DROPLET_SIZE=${DROPLET_SIZE}"
echo "VOLUME_SIZE=${VOLUME_SIZE}"
echo "FS_TYPE=${FS_TYPE}"
echo "REGION=${REGION}"
echo
echo "=> Swarm [${name}]..."

# PRIMARY NODE
status="new" && has_droplet $name && status="existing"
echo "[1] ${status} primary"

# EXISTING REPLICAS
existing_replicas="$(get_droplet_replicas $name | wc -l)"
s="s" && [ "$existing_replicas" == "1" ] && s=""
echo "[$(get_droplet_replicas $name | wc -l)] existing replica${s}"

# NEW REPLICAS
s="s" && [ "$new_replicas" == "1" ] && s=""
echo "[${new_replicas}] new replica${s}"


# # PRIMARY NODE
# status="NEW"
# has_droplet $name && status="EXISTING"
# node_row "${status} PRIMARY: ${name}"
# get_droplet_info $name
# get_volume_info $name
# get_record_info $name
# echo
# echo

# # EXISTING REPLICAS
# for replica in $(get_droplet_replicas $name); do
#   node_row "EXISTING REPLICA: ${replica}"
#   get_droplet_info $replica
#   get_volume_info $replica
#   get_record_info $replica
# done
# echo
# echo

# # NEW REPLICAS
# echo "" > /tmp/reserved_replicas
# for i in $(seq $new_replicas); do
#   replica=$(next_replica_name $name)
#   node_row "NEW REPLICA: ${replica}"
#   get_droplet_info $replica
#   get_volume_info $replica
#   get_record_info $replica  
# done
# echo
# echo

echo "=================================================================="
if confirm "Make changes?"; then  
  echo "=> Begining..."
else
  echo "=> Cancelled."  
  exit 1;
fi

# ---------------------------------------------------------
# Process Primary
# ---------------------------------------------------------
status="NEW"
has_droplet $name && status="EXISTING"
node_row "${status} PRIMARY: ${name}"
get_droplet_info $name
get_volume_info $name
get_record_info $name
echo
echo

if confirm "Process node?"; then  
  create_or_resize_volume $name true
  create_or_resize_droplet $name true
  create_record "${name}" "$(get_droplet_public_ip $name)"
  create_record "*.${name}" "$(get_droplet_public_ip $name)"
  create_record "private.${name}" "$(get_droplet_private_ip $name)"
fi

# ---------------------------------------------------------
# Process Existing Replicas
# ---------------------------------------------------------
for replica in $(get_droplet_replicas $name); do  
  node_row "EXISTING REPLICA: ${replica}"
  get_droplet_info $replica
  get_volume_info $replica
  get_record_info $replica
  echo
  echo
  
  if confirm "Process node?"; then  
    create_or_resize_volume $replica
    create_or_resize_droplet $replica
    create_record "${replica}" "$(get_droplet_public_ip $replica)"
    create_record "*.${replica}" "$(get_droplet_public_ip $replica)"
    create_record "private.${replica}" "$(get_droplet_private_ip $replica)"
  fi
done

# ---------------------------------------------------------
# Process New Replicas
# ---------------------------------------------------------
echo "" > /tmp/reserved_replicas
for i in $(seq $new_replicas); do
  replica=$(next_replica_name $name)
  node_row "NEW REPLICA: ${replica}"
  get_droplet_info $replica
  get_volume_info $replica
  get_record_info $replica
  echo
  echo
  
  if confirm "Process node?"; then  
    create_or_resize_volume $replica
    create_or_resize_droplet $replica
    create_record "${replica}" "$(get_droplet_public_ip $replica)"
    create_record "*.${replica}" "$(get_droplet_public_ip $replica)"
    create_record "private.${replica}" "$(get_droplet_private_ip $replica)"
  fi 
  
done
echo
echo


exit 0