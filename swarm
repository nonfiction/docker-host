#!/bin/bash
src(){ if [ -e$1 ];then . $1;else .<(curl -fsSL https://github.com/nonfiction/platform/raw/master/$1);fi;}

src "lib/helpers.sh"
src "lib/record.sh"
src "lib/droplet.sh"
src "lib/volume.sh"
src "lib/env.sh"

echo "=> Configuration..."
echo "DROPLET_IMAGE=${DROPLET_IMAGE}"
echo "DROPLET_SIZE=${DROPLET_SIZE}"
echo "VOLUME_SIZE=${VOLUME_SIZE}"
echo "FS_TYPE=${FS_TYPE}"
echo "REGION=${REGION}"
echo "SSH_KEY=${SSH_KEY}"
echo "SSH_PUB=${SSH_PUB}"
echo "ROOT_PASSWORD=${ROOT_PASSWORD}"
echo
echo "=> Swarm [${SWARM}]..."

# PRIMARY NODE
status="new" && has_droplet $SWARM && status="existing"
echo "[1] ${status} primary"

# EXISTING REPLICAS
s="s" && [ "$EXISTING_REPLICAS" == "1" ] && s=""
echo "[${EXISTING_REPLICAS}] existing replica${s}"

# NEW REPLICAS
s="s" && [ "$NEW_REPLICAS" == "1" ] && s=""
echo "[${NEW_REPLICAS}] new replica${s}"


# # PRIMARY NODE
# status="NEW"
# has_droplet $name && status="EXISTING"
# node_row "${status} PRIMARY: ${name}"
# get_droplet_info $name
# get_volume_info $name
# get_record_info $name
# echo
# echo

# # EXISTING REPLICAS
# for replica in $(get_droplet_replicas $name); do
#   node_row "EXISTING REPLICA: ${replica}"
#   get_droplet_info $replica
#   get_volume_info $replica
#   get_record_info $replica
# done
# echo
# echo

# # NEW REPLICAS
# echo "" > /tmp/reserved_replicas
# for i in $(seq $new_replicas); do
#   replica=$(next_replica_name $name)
#   node_row "NEW REPLICA: ${replica}"
#   get_droplet_info $replica
#   get_volume_info $replica
#   get_record_info $replica  
# done
# echo
# echo

echo "=================================================================="
if confirm "Make changes?"; then  
  echo "=> Begining..."
else
  echo "=> Cancelled."  
  exit 1;
fi

# ---------------------------------------------------------
# Process Primary
# ---------------------------------------------------------
status="NEW"
has_droplet $name && status="EXISTING"
node_row "${status} PRIMARY: ${name}"
get_droplet_info $name
get_volume_info $name
get_record_info $name
echo
echo

if confirm "Process node?"; then  
  create_or_resize_volume $name true
  create_or_resize_droplet $name true
  create_record "${name}" "$(get_droplet_public_ip $name)"
  create_record "*.${name}" "$(get_droplet_public_ip $name)"
  create_record "private.${name}" "$(get_droplet_private_ip $name)"
fi

# ---------------------------------------------------------
# Process Existing Replicas
# ---------------------------------------------------------
for replica in $(get_droplet_replicas $name); do  
  node_row "EXISTING REPLICA: ${replica}"
  get_droplet_info $replica
  get_volume_info $replica
  get_record_info $replica
  echo
  echo
  
  if confirm "Process node?"; then  
    create_or_resize_volume $replica
    create_or_resize_droplet $replica
    create_record "${replica}" "$(get_droplet_public_ip $replica)"
    create_record "*.${replica}" "$(get_droplet_public_ip $replica)"
    create_record "private.${replica}" "$(get_droplet_private_ip $replica)"
  fi
done

# ---------------------------------------------------------
# Process New Replicas
# ---------------------------------------------------------
echo "" > /tmp/reserved_replicas
for i in $(seq $new_replicas); do
  replica=$(next_replica_name $name)
  node_row "NEW REPLICA: ${replica}"
  get_droplet_info $replica
  get_volume_info $replica
  get_record_info $replica
  echo
  echo
  
  if confirm "Process node?"; then  
    create_or_resize_volume $replica
    create_or_resize_droplet $replica
    create_record "${replica}" "$(get_droplet_public_ip $replica)"
    create_record "*.${replica}" "$(get_droplet_public_ip $replica)"
    create_record "private.${replica}" "$(get_droplet_private_ip $replica)"
  fi 
  
done
echo
echo


exit 0