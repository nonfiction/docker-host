#!/bin/bash

# Bash helper functions
if [ -e /root/platform/swarm/lib/helpers.sh ]; then source /root/platform/swarm/lib/helpers.sh;
else source <(curl -fsSL https://github.com/nonfiction/platform/raw/master/swarm/lib/helpers.sh); fi

# Gluster functions
if [ -e /root/platform/swarm/lib/gluster.sh ]; then source /root/platform/swarm/lib/gluster.sh;
else source <(curl -fsSL https://github.com/nonfiction/platform/raw/master/swarm/lib/gluster.sh); fi


# Defaults 
undefined $VOLUME_NAME && VOLUME_NAME="data-gfs"
undefined $VOLUME_MOUNT && VOLUME_MOUNT="/data"
# BRICK_DIR optional


# RESIZE GLUSTER CLUTER (run on primary node)
# ---------------------------------------------
if defined $BEFORE_RESIZE && defined $NAME; then

  # Before resizing with doctl, remove the brick from gluster
  echo_run "service cron stop"
  echo_run "gluster volume reset-brick ${VOLUME_NAME} $(get_brick $NAME) start"

elif defined $AFTER_RESIZE && defined $NAME; then

  # After resizing with doctl, return the brick to gluster
  echo_run "resize2fs $(get_disk $NAME)"
  echo_run "gluster volume reset-brick ${VOLUME_NAME} $(get_brick $NAME) $(get_brick $NAME) commit force"
  echo_run "service cron start"


# LEAVE GLUSTER CLUTER (run on primary node)
# ---------------------------------------------
elif defined $LEAVE && defined $NAME; then

  # yes | gluster volume remove-brick data-gfs replica 2 xyz02:/mnt/xyz02/data-gfs force
  # gluster peer detach xyz02
  brick_count=$(count_bricks $VOLUME_NAME -1)
  brick_name=$(get_brick $NAME)             
  echo_run "gluster volume remove-brick ${VOLUME_NAME} replica ${brick_count} ${brick_name} force"
  echo_run "gluster peer detach ${NAME}"


# JOIN GLUSTER CLUSTER (mostly run on primary node, last bit run on each replica)
# -------------------------------------------------------------------------------
elif defined $JOIN && defined $NAME && defined $PRIMARY; then

  # Most of this occurs on the primary node
  if [ "$NAME" = "$PRIMARY" ]; then
    if defined $NODES; then

      # GlusterFS probe nodes  
      echo_next "Gluster probe peers"
      for node in $NODES; do
        if [ "$node" != "$PRIMARY" ]; then
          echo "${node}: $(gluster peer probe $node)"
        fi
      done

      echo_info "Gluster pool list"
      gluster pool list


      echo_next "Gluster create volumes & bricks"
      for node in $NODES; do

        # $BRICK_DIR will override this
        brick_dir="$(get_brick_dir $node)"
        mkdir -p $brick_dir

        # Primary node
        if [ "$node" = "$PRIMARY" ]; then

          # Check if volume does not yet exist
          if undefined_volume $VOLUME_NAME; then

            # Create volume 
            echo_next "Gluster create $VOLUME_NAME"
            echo_run "gluster volume create $VOLUME_NAME ${node}:${brick_dir} force"
            sleep 3

            # Start volume
            echo_next "Gluster start $VOLUME_NAME"
            echo_run "gluster volume start ${VOLUME_NAME}"
            sleep 3

          fi

        # Replica nodes
        else

          # Check if brick does not yet exist
          if undefined_brick $VOLUME_NAME $(get_brick $node); then

            # Add brick to volume
            brick_count=$(count_bricks $VOLUME_NAME +1)
            brick_name=$(get_brick $node)             
            echo_run "gluster volume add-brick ${VOLUME_NAME} replica ${brick_count} ${brick_name} force"
            sleep 3

          fi

        fi
      done

    fi
  fi

  
  # Every node must mount the volume
  if unmounted_volume $VOLUME_NAME; then
    echo_next "Gluster mount $VOLUME_NAME"
    mkdir -p $VOLUME_MOUNT
    # echo_run "umount ${VOLUME_MOUNT} && mount.glusterfs localhost:/${VOLUME_NAME} ${VOLUME_MOUNT}"
    echo_run "umount ${VOLUME_MOUNT}"
    echo_run "mount.glusterfs ${NAME}:/${VOLUME_NAME} ${VOLUME_MOUNT}"
  fi

  # Make sure this volume is mounted upon reboot
  file="/etc/fstab"
  entry="localhost:/${VOLUME_NAME} ${VOLUME_MOUNT} glusterfs defaults,_netdev,backupvolfile-server=localhost 0 0"
  if undefined "$(cat $file | grep "${entry}")"; then
    echo_next "Appending $file"
    echo "${entry}" | tee --append $file
  fi

fi
