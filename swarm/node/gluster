#!/bin/bash

# Bash helper functions
if [ -e /root/platform/swarm/lib/helpers.sh ]; then source /root/platform/swarm/lib/helpers.sh;
else source <(curl -fsSL https://github.com/nonfiction/platform/raw/master/swarm/lib/helpers.sh); fi

# Volumes functions
if [ -e /root/platform/swarm/lib/volumes.sh ]; then source /root/platform/swarm/lib/volumes.sh;
else source <(curl -fsSL https://github.com/nonfiction/platform/raw/master/swarm/lib/volumes.sh); fi


# RESIZE GLUSTER CLUTER (run on primary node)
# ---------------------------------------------
if defined $BEFORE_RESIZE && defined $NODE; then

  # GFS_DATA_VOL, GFS_DATA_DEV
  volumes_env $NODE

  # Pause cron while replacing brick
  echo_run "service cron stop"

  # Before resizing with doctl, remove the brick from gluster
  echo_run "gluster volume reset-brick ${GFS_DATA_VOL} ${GFS_DATA_DEV} start"
  echo_info "Gluster brick ${GFS_DATA_DEV} has been reset on ${GFS_DATA_VOL}"

elif defined $AFTER_RESIZE && defined $NODE; then

  # DO_BLOCK_DEV, GFS_DATA_VOL, GFS_DATA_DEV
  volumes_env $NODE

  echo_run "e2fsck -f -y ${DO_BLOCK_DEV}" # /dev/disk/by-id/scsi-0DO_Volume_abc04

  # This should run xfs_growfs if supporing xfs files system
  echo_run "resize2fs ${DO_BLOCK_DEV}" # /dev/disk/by-id/scsi-0DO_Volume_abc04
  
  echo_run "mount -o discard,defaults,noatime ${DO_BLOCK_DEV} ${DO_BLOCK_MNT}"

  # After resizing with doctl, return the brick to gluster
  echo_run "gluster volume reset-brick ${GFS_DATA_VOL} ${GFS_DATA_DEV} ${GFS_DATA_DEV} commit force"
  echo_info "Gluster brick ${GFS_DATA_DEV} has been replaced on ${GFS_DATA_VOL}"

  # Restart cron
  echo_run "service cron start"


# REMOVE FROM GLUSTER POOL (run on primary node)
# ---------------------------------------------
elif defined $REMOVE && defined $NODE; then

  # GFS_DATA_VOL, GFS_DATA_DEV
  volumes_env $NODE

  # /data
  # Remove brick from volume
  brick_count=$(count_bricks $GFS_DATA_VOL -1) # number of bricks, one less than current
  echo "gluster volume remove-brick ${GFS_DATA_VOL} replica ${brick_count} ${GFS_DATA_DEV} force"
  yes | gluster volume remove-brick ${GFS_DATA_VOL} replica ${brick_count} ${GFS_DATA_DEV} force
  echo_info "Gluster brick ${GFS_DATA_DEV} has been removed from ${GFS_DATA_VOL}"

  # /work
  # Remove brick from volume
  brick_count=$(count_bricks $GFS_WORK_VOL -1) # number of bricks, one less than current
  echo "gluster volume remove-brick ${GFS_WORK_VOL} replica ${brick_count} ${GFS_WORK_DEV} force"
  yes | gluster volume remove-brick ${GFS_WORK_VOL} replica ${brick_count} ${GFS_WORK_DEV} force
  echo_info "Gluster brick ${GFS_WORK_DEV} has been removed from ${GFS_WORK_VOL}"

  # Remove peer from pool
  echo "gluster peer detach ${NODE} force"
  yes | gluster peer detach ${NODE} force
  echo_info "Gluster peer ${NODE} has been detached"


# JOIN GLUSTER POOL (mostly run on primary node, last bit run on each replica)
# -------------------------------------------------------------------------------
elif defined $JOIN && defined $NODE && defined $PRIMARY; then

  # Most of this occurs on the primary node
  if [ "$NODE" = "$PRIMARY" ]; then
    if defined $NODES; then

      # GlusterFS probe nodes  
      echo_next "Gluster probe peers"
      for node in $NODES; do
        if [ "$node" != "$PRIMARY" ]; then
          echo "${node}: $(gluster peer probe $node)"
        fi
      done

      echo_info "Gluster pool list"
      gluster pool list

      echo_next "Gluster create volumes & bricks"
      for node in $NODES; do

        volumes_env $node

        # Primary node
        if [ "$node" = "$PRIMARY" ]; then
          create_gluster_volume $GFS_DATA_VOL $GFS_DATA_DEV
          create_gluster_volume $GFS_WORK_VOL $GFS_WORK_DEV

        # Replica nodes
        else
          expand_gluster_volume $GFS_DATA_VOL $GFS_DATA_DEV
          expand_gluster_volume $GFS_WORK_VOL $GFS_WORK_DEV

        fi
      done

    fi
  fi

  # Every node must mount the volumes
  volumes_env $NODE
  mount_gluster_volume $GFS_DATA_VOL $GFS_DATA_MNT
  mount_gluster_volume $GFS_WORK_VOL $GFS_WORK_MNT
  mkdir -p $GFS_WORK_MNT/.ssh

fi
