#!/bin/bash

# Source once locally if available OR via curl if not 
include() {
  [ -z "$1" ] && return 1
  if [ -e /usr/local/share/platform/swarm/$1 ]; then source /usr/local/share/platform/swarm/$1;
  elif [ -e /root/platform/swarm/$1 ]; then source /root/platform/swarm/$1;
  else source <(curl -fsSL https://github.com/nonfiction/platform/raw/main/swarm/$1); fi
}

# Bash helper functions
include "lib/helpers.sh"


# DRAIN DOCKER SWARM (run on manager)
# ----------------------------------------
if defined $DRAIN && defined $NODE; then

  # Drain the node before reboot 
  echo_run "docker node update --availability=drain ${NODE}"


# ACTIVE DOCKER SWARM (run on manager)
# ----------------------------------------
elif defined $ACTIVE && defined $NODE; then

  # Restore the node to active after reboot 
  echo_run "docker node update --availability=active ${NODE}"


# PROMOTE DOCKER SWARM (run on manager)
# ----------------------------------------
elif defined $PROMOTE && defined $NODE; then

  # Run on primary node to promote a worker to manager
  echo_run "docker node promote ${NODE}"
  sleep 1


# DEMOTE DOCKER SWARM (run on manager)
# ----------------------------------------
elif defined $DEMOTE && defined $NODE; then

  # Run on primary node to demote manager (it's probably only a worker, but just in case)
  echo_run "docker node demote ${NODE}"
  sleep 5


# DEMOTE DOCKER SWARM (run on worker)
# ----------------------------------------
elif defined $LEAVE; then

  # Run on replica node to leave the swarm
  echo_run "docker swarm leave"
  sleep 5


# DEMOTE DOCKER SWARM (run on manager)
# ----------------------------------------
elif defined $REMOVE && defined $NODE; then

  # Run on primary node to remove worker node
  echo_run "docker node rm --force ${NODE}"


# JOIN/INIT DOCKER SWARM (run on each node)
# ----------------------------------------
elif defined $JOIN && defined $NODE && defined $JOIN_TOKEN && defined $PRIVATE_IP; then

  # Primary node - create swarm
  if [ "$JOIN_TOKEN" = "primary" ]; then

    if [ "$(docker info --format '{{.Swarm.LocalNodeState}}')" != "active" ]; then
      echo_next "Initializing swarm mode [${NODE}]"
      echo "docker swarm init --advertise-addr $PRIVATE_IP"
      docker swarm init --advertise-addr $PRIVATE_IP
    else
      echo_info "Swarm mode is already active for primary [${NODE}]"
    fi

    echo_next "Writing token to /usr/local/env/DOCKER_JOIN_TOKEN"
    echo "$(docker swarm join-token worker | grep docker | awk '{print $5, $6}')" | tee /usr/local/env/DOCKER_JOIN_TOKEN

  # Replica node - join swarm
  else

    if [ "$(docker info --format '{{.Swarm.LocalNodeState}}')" != "active" ]; then
      echo_next "Joining swarm as worker [${NODE}]"
      echo "docker swarm join --token $JOIN_TOKEN"
      docker swarm join --token $JOIN_TOKEN
    else
      echo_info "Swarm mode is already active for replica [${NODE}]"
    fi

  fi


# # STACK
# # ----------------------------------------
# elif defined $STACK && defined $NODES; then
#
#   # # Create a comma-separated list of hostnames for traefik configs
#   # build_hosts() {
#   #   local domain=$(cat /usr/local/env/DOMAIN)
#   #   local hosts=""
#   #   for node in $NODES; do
#   #     hosts+=",\`${1}.${node}.${domain}\`"
#   #   done
#   #   echo "${hosts:1}"
#   # }
#   #
#   # # Build domain certs config for traefik yaml
#   # build_domains() {
#   #   local domain=$(cat /usr/local/env/DOMAIN)
#   #   local domains="" i=0 n="\n        " # new line & 8 spaces
#   #   for node in $NODES; do
#   #     domains+="${n}traefik.http.routers.wildcard-certs.tls.domains[${i}].main: \"${node}.${domain}\""
#   #     domains+="${n}traefik.http.routers.wildcard-certs.tls.domains[${i}].sans: \"*.${node}.${domain}\""
#   #     ((i++))
#   #   done
#   #   echo "$domains"
#   # }
#   
#   # URL to repo for downloading files
#   BASE="https://github.com/nonfiction/platform/raw/main"
#
#   # Create traefik stack
#   stack="/root/platform/traefik.yml"
#   echo_next "Writing ${stack}"
#   rm -f $stack
#   curl -fsSL $BASE/stack-traefik.yml > $stack
#   sed -i "s|__HOSTS__|$(build_hosts "traefik")|" $stack
#   sed -i "s|__DOMAINS__|$(build_domains)|" $stack
#   sed -i "s|__PRIMARY_IP__|$(cat /usr/local/env/PRIMARY_IP)|" $stack
#   sed -i "s|__DO_AUTH_TOKEN__|${DO_AUTH_TOKEN}|" $stack
#   sed -i "s|__ROOT_PRIVATE_KEY__|${ROOT_PRIVATE_KEY}|" $stack
#
#   # Create hello-world stack
#   stack="/root/platform/hello-world.yml"
#   echo_next "Writing ${stack}"
#   rm -f $stack
#   curl -fsSL $BASE/stack-hello-world.yml > $stack
#   sed -i "s|__HOSTS__|$(build_hosts "hello-world")|" $stack
#
#
#   # Create portainer stack
#   stack="/root/platform/portainer.yml"
#   echo_next "Writing ${stack}"
#   rm -f $stack
#   curl -fsSL $BASE/stack-portainer.yml > $stack
#   sed -i "s|__HOSTS__|$(build_hosts "portainer")|" $stack
#
#
#   # Create workspace stack
#   stack="/root/platform/workspace.yml"
#   echo_next "Writing ${stack}"
#   rm -f $stack
#   curl -fsSL $BASE/stack-workspace.yml > $stack
#
#   sed -i "s|__HOSTS__|$(build_hosts "workspace")|" $stack
#   sed -i "s|__SWARM__|$(cat /usr/local/env/SWARM)|" $stack
#
#   sed -i "s|__DO_AUTH_TOKEN__|${DO_AUTH_TOKEN}|" $stack
#   sed -i "s|__WEBHOOK__|${WEBHOOK}|" $stack
#
#   sed -i "s|__DROPLET_IMAGE__|${DROPLET_IMAGE}|" $stack
#   sed -i "s|__FS_TYPE__|${FS_TYPE}|" $stack
#   sed -i "s|__REGION__|${REGION}|" $stack
#
#   sed -i "s|__CODE_PASSWORD__|${CODE_PASSWORD}|" $stack
#   sed -i "s|__SUDO_PASSWORD__|${SUDO_PASSWORD}|" $stack
#   
#   sed -i "s|__BASICAUTH_PASSWORD__|${BASICAUTH_PASSWORD}|" $stack
#   sed -i "s|__BASICAUTH_USER__|${BASICAUTH_USER}|" $stack
#
#   sed -i "s|__DB_HOST__|${DB_HOST}|" $stack
#   sed -i "s|__DB_PASSWORD__|${DB_PASSWORD}|" $stack
#   sed -i "s|__DB_PORT__|${DB_PORT}|" $stack
#   sed -i "s|__DB_USER__|${DB_USER}|" $stack
#
#   sed -i "s|__GITHUB_TOKEN__|${GITHUB_TOKEN}|" $stack
#   sed -i "s|__GITHUB_USER__|${GITHUB_USER}|" $stack
#   sed -i "s|__GIT_USER_EMAIL__|${GIT_USER_EMAIL}|" $stack
#   sed -i "s|__GIT_USER_NAME__|${GIT_USER_NAME}|" $stack
#
#   sed -i "s|__ROOT_PASSWORD__|${ROOT_PASSWORD}|" $stack
#   sed -i "s|__ROOT_PRIVATE_KEY__|${ROOT_PRIVATE_KEY}|" $stack


# PULL
# ----------------------------------------
elif defined $PULL; then

  echo_next "Pulling traefik..."
  echo_run "docker pull nonfiction/traefik"

  echo_next "Pulling hello-world..."
  echo_run "docker pull nonfiction/hello-world"

  if defined $IS_PRIMARY; then
    echo_next "Pulling portainer..."
    echo_run "docker pull portainer/portainer-ce"
  fi

  if defined $IS_PRIMARY; then
    echo_next "Pulling workspace..."
    echo_run "docker pull nonfiction/workspace"
  fi

fi
