#!/bin/bash

# Bash helper functions
if [ -e /root/platform/swarm/lib/helpers.sh ]; then source /root/platform/swarm/lib/helpers.sh;
else source <(curl -fsSL https://github.com/nonfiction/platform/raw/master/swarm/lib/helpers.sh); fi

# DRAIN DOCKER SWARM (run on manager)
# ----------------------------------------
if defined $DRAIN && defined $NAME; then

  # Drain the node before reboot 
  echo_run "docker node update --availability=drain ${NAME}"

  if defined $WAIT_AFTER; then
    echo "Waiting $WAIT_AFTER seconds for node to drain..."
    sleep $WAIT_AFTER
  fi


# DRAIN DOCKER SWARM (run on manager)
# ----------------------------------------
elif defined $ACTIVE && defined $NAME; then

  if defined $WAIT_BEFORE; then
    echo "Waiting $WAIT_BEFORE seconds for node to boot..."
    sleep $WAIT_BEFORE
  fi

  # Restore the node to active after reboot 
  echo_run "docker node update --availability=active ${NAME}"


# PROMOTE DOCKER SWARM (run on manager)
# ----------------------------------------
elif defined $PROMOTE && defined $NAME; then

  # Run on primary node to promote a worker to manager
  echo_run "docker node promote ${NAME}"
  sleep 1


# DEMOTE DOCKER SWARM (run on manager)
# ----------------------------------------
elif defined $DEMOTE && defined $NAME; then

  # Run on primary node to demote manager (it's probably only a worker, but just in case)
  echo_run "docker node demote ${NAME}"
  sleep 5


# DEMOTE DOCKER SWARM (run on worker)
# ----------------------------------------
elif defined $LEAVE; then

  # Run on replica node to leave the swarm
  echo_run "docker swarm leave"
  sleep 5


# DEMOTE DOCKER SWARM (run on manager)
# ----------------------------------------
elif defined $REMOVE && defined $NAME; then

  # Run on primary node to remove worker node
  echo_run "docker node rm --force ${NAME}"


# JOIN/INIT DOCKER SWARM (run on each node)
# ----------------------------------------
elif defined $JOIN && defined $NAME && defined $JOIN_TOKEN && defined $PRIVATE_IP; then

  # Primary node - create swarm
  if [ "$JOIN_TOKEN" = "primary" ]; then

    if [ "$(docker info --format '{{.Swarm.LocalNodeState}}')" != "active" ]; then
      echo_next "Initializing swarm mode [${NAME}]"
      echo "docker swarm init --advertise-addr $PRIVATE_IP"
      docker swarm init --advertise-addr $PRIVATE_IP
    else
      echo_info "Swarm mode is already active for primary [${NAME}]"
    fi

    echo_next "Writing token to /etc/docker-join-token"
    echo "$(docker swarm join-token worker | grep docker | awk '{print $5, $6}')" | tee /etc/docker-join-token

  # Replica node - join swarm
  else

    if [ "$(docker info --format '{{.Swarm.LocalNodeState}}')" != "active" ]; then
      echo_next "Joining swarm as worker [${NAME}]"
      echo "docker swarm join --token $JOIN_TOKEN"
      docker swarm join --token $JOIN_TOKEN
    else
      echo_info "Swarm mode is already active for replica [${NAME}]"
    fi

  fi

fi
